# Ingest & Storage
#   clickhouse ✅
#   mysql ✅
#   kafka ✅

# Processing & Transformation
#   dbt ✅ (tự build thêm container nếu cần sau)
#   spark(master/worker) ✅ (tự thêm sau nếu cần)

# Visualization
#   Superset ✅ (cũng có thể thêm sau)

version: '3'

services:
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: admin
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - airflow-network
    restart: unless-stopped

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - airflow-network
    restart: unless-stopped

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      # KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_ADVERTISED_HOST_NAME: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - airflow-network
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    volumes:
      - mysql-data:/var/lib/mysql
      - ./my.cnf:/etc/mysql/conf.d/my.cnf  # Mount file cấu hình
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uadmin", "-padmin"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - airflow-network
    restart: unless-stopped

  connect:
    image: debezium/connect:2.6
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_PLUGIN_PATH: /kafka/connect,/debezium-connector
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - airflow-network
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka_ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      # KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: localhost:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - airflow-network
    restart: unless-stopped

  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_WEBUI_PORT=8081
      
    ports:
      - "8081:8081"
      - "7077:7077"
    volumes:
      - spark-data:/bitnami

      - ./config:/opt/config  # Mount thư mục config của bạn
      - ./sparks:/opt/sparks    # Mount thư mục sparks của bạn
      - ./checkpoints:/opt/checkpoints
    networks:
      - airflow-network

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark-data:/bitnami

      - ./config:/opt/config  # Mount thư mục config của bạn
      - ./sparks:/opt/sparks    # Mount thư mục sparks của bạn
      - ./checkpoints:/opt/checkpoints
    depends_on:
      - spark-master
    networks:
      - airflow-network

  dbt:
    build:
      context: .
      dockerfile: Dockerfile-dbt
    container_name: dbt
    networks:
      - airflow-network
    volumes:
      - ./dbt/order_streaming:/usr/app
      - ./.dbt:/root/.dbt
    working_dir: /usr/app
    stdin_open: true
    tty: true

  airflow-postgres:
    image: postgres:12
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - airflow-network
    restart: unless-stopped

  superset:
    build:
      context: .
      dockerfile: Dockerfile-superset
    container_name: superset_app
    depends_on:
      airflow-postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment:
      SUPERSET_ENV: production
      SUPERSET_LOAD_EXAMPLES: "no"
      DATABASE_URL: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    ports:
      - "8088:8088"
    volumes:
      - superset_home:/app/superset_home
      - ./superset/superset_config.py:/app/pythonpath/superset_config.py
    networks:
      - airflow-network
    command: >
      /bin/sh -c "
        superset db upgrade &&
        superset fab create-admin \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --email admin@example.com || true &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088
      "
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8088/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  airflow-network:
    driver: bridge

volumes:
  clickhouse-data:
  kafka-data:
  mysql-data:
  spark-data:
  spark-checkpoints: # <-- THÊM DÒNG NÀY
  postgres-data:
  superset_home:
